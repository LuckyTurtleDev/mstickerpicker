name: Rust

on:
  push:
  pull_request:
  release:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - name: Install xrandr
        run: sudo apt-get install -y libxrandr-dev libdbus-1-dev
      - name: Install rlottie
        run: |
          sudo apt-get install -y ninja-build
          wget -q "https://github.com/Samsung/rlottie/archive/refs/tags/v$pkgver.tar.gz"
          tar xfz v$pkgver.tar.gz
          cd rlottie-$pkgver
          wget -q "https://aur.archlinux.org/cgit/aur.git/plain/0001-add-missing-include.patch?h=rlottie" -o 0001-add-missing-include.patch
          patch --forward --strip=0 --input=0001-add-missing-include.patch
          mkdir -p build
          cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_BUILD_TYPE=Release
          ninja
          sudo ninja install
          cd ../..
        env:
          pkgver: "0.2"
      - run: cargo test --workspace --all-features
        env:
          RUST_BACKTRACE: 1

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check
      
  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Build the Docker image
      run: |
        image="ghcr.io/$GITHUB_REPOSITORY"
        tags=()
        tags+=" $GITHUB_SHA"
        tags+=" $GITHUB_REF_NAME"
        if [[ "$GITHUB_REF_TYPE" = tag ]]
        then
          tags+=" latest"
        fi
        tags_command=""
        while IFS= read -r tag
        do
          tags_command+=" --tag $image:$tag "
        done < < tags
        tags_command="$(echo $tags_command | tr '[:upper:]' '[:lower:]')"
        if [[ "$GITHUB_BASE_REF" == "" ]]
        then
          push="--push"
          echo "Image will be pushed."
        else
          push=""
          echo "Image will not be pushed. Piepline is a pull request"
        fi
        docker login -u "$GITHUB_REPOSITORY_OWNER" -p "${{secrets.GITHUB_TOKEN}}" ghcr.io
        echo "build image with tags: $tags_command"
        docker buildx build ${push} --platform ${PLATFORMS:-linux/amd64} $tags_command .
