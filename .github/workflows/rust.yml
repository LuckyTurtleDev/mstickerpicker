name: Rust

on:
  push:
  pull_request:
  release:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mstickerpicker
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - name: install sqlx-cli
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: sqlx-cli
          version: "0.6"
      - uses: msrd0/install-rlottie-action@v1
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}}"
      - run: cargo test --workspace --all-features
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/mstickerpicker
          RUST_BACKTRACE: 1


  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check


  docker:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Easy Docker
      uses: LuckyTurtleDev/easy-docker-action@test
      with:
        ghcr_password: ${{ secrets.GITHUB_TOKEN }}
        buildx_config_inline: |
         insecure-entitlements = [ "network.host" ]
         [worker.oci]
         max-parallelism = 2
